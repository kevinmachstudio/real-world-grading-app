datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["aggregateApi"]
}

// TODO: define fields and relations
model User {
  id Int @default(autoincrement()) @id
  email     String @unique
  firstName String
  lastName  String
  social    Json?
  // A single user can be associated with many courses.
  courses   CourseEnrollment[]
  testResults TestResult[] @relation(name: "results")
  testGraded TestResult[] @relation(name: "graded")
}

// TODO: define fields and relations
model Course {
  id            Int     @default(autoincrement()) @id
  name          String
  courseDetails String?

  // A single course can have many associated users.
  members       CourseEnrollment[]
  tests         Test[]
}

// TODO: define fields and relations
model Test {
  id        Int      @default(autoincrement()) @id
  updatedAt DateTime @updatedAt
  name      String // Name of the test
  date      DateTime // Date of the test

  // relation fields
  courseId Int
  course Course @relation(fields: [courseId], references: [id])
  testResults TestResult[] // relation field
}

// TODO: define fields and relations
model TestResult {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  result    Int // Percentage precise to one decimal point represented as `result * 10^-1`
  
  // relation fields
  studentId Int
  student   User @relation(name: "results", fields: [studentId], references: [id]) // represents a student who took the test
  graderId  Int
  gradedBy  User @relation(name: "graded", fields: [graderId], references: [id]) // represents a teacher
  testId    Int
  test      Test @relation(fields: [testId], references: [id])
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  // relation fields
  userId    Int
  user      User @relation(fields: [userId], references: [id])
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])
  
  // ensures that every User can only be associated to a Course once, either as a student or as a teacher but not both
  @@id([userId, courseId])
  @@index([userId, role])
}

enum UserRole {
  STUDENT
  TEACHER
}